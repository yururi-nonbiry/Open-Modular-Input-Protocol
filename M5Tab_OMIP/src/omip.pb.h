/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_OMIP_PROTO_OMIP_PB_H_INCLUDED
#define PB_OMIP_PROTO_OMIP_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _omip_FeedbackImage_ImageFormat {
    omip_FeedbackImage_ImageFormat_RGB565_RLE = 0,
    omip_FeedbackImage_ImageFormat_JPEG = 1
} omip_FeedbackImage_ImageFormat;

typedef enum _omip_DeviceCapabilityResponse_PortDescription_PortType {
    omip_DeviceCapabilityResponse_PortDescription_PortType_DIGITAL_INPUT = 0,
    omip_DeviceCapabilityResponse_PortDescription_PortType_ANALOG_INPUT = 1,
    omip_DeviceCapabilityResponse_PortDescription_PortType_ENCODER_INPUT = 2,
    omip_DeviceCapabilityResponse_PortDescription_PortType_IMAGE_OUTPUT = 3,
    omip_DeviceCapabilityResponse_PortDescription_PortType_LED_OUTPUT = 4
} omip_DeviceCapabilityResponse_PortDescription_PortType;

/* Struct definitions */
typedef struct _omip_InputDigital {
    uint32_t device_id;
    uint32_t port_id;
    bool state;
} omip_InputDigital;

typedef struct _omip_InputAnalog {
    uint32_t device_id;
    uint32_t port_id;
    float value;
} omip_InputAnalog;

typedef struct _omip_InputEncoder {
    uint32_t device_id;
    uint32_t port_id;
    int32_t steps;
} omip_InputEncoder;

typedef PB_BYTES_ARRAY_T(200) omip_FeedbackImage_chunk_data_t;
typedef struct _omip_FeedbackImage {
    uint32_t device_id;
    uint32_t screen_id;
    omip_FeedbackImage_ImageFormat format;
    uint32_t total_size;
    uint32_t chunk_offset;
    omip_FeedbackImage_chunk_data_t chunk_data;
    bool is_last_chunk;
} omip_FeedbackImage;

typedef struct _omip_FeedbackLed {
    uint32_t device_id;
    uint32_t led_id;
    uint32_t color_rgb;
} omip_FeedbackLed;

typedef struct _omip_SystemConfig {
    char dummy_field;
} omip_SystemConfig;

typedef struct _omip_DeviceCapabilityRequest {
    char dummy_field;
} omip_DeviceCapabilityRequest;

typedef struct _omip_DeviceCapabilityResponse {
    uint32_t device_id;
    pb_callback_t ports;
} omip_DeviceCapabilityResponse;

typedef struct _omip_WrapperMessage {
    pb_size_t which_message_type;
    union {
        omip_InputDigital input_digital;
        omip_InputAnalog input_analog;
        omip_InputEncoder input_encoder;
        omip_FeedbackImage feedback_image;
        omip_FeedbackLed feedback_led;
        omip_SystemConfig system_config;
        omip_DeviceCapabilityRequest capability_request;
        omip_DeviceCapabilityResponse capability_response;
    } message_type;
} omip_WrapperMessage;

typedef struct _omip_DeviceCapabilityResponse_PortDescription {
    omip_DeviceCapabilityResponse_PortDescription_PortType type;
    uint32_t port_id;
} omip_DeviceCapabilityResponse_PortDescription;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _omip_FeedbackImage_ImageFormat_MIN omip_FeedbackImage_ImageFormat_RGB565_RLE
#define _omip_FeedbackImage_ImageFormat_MAX omip_FeedbackImage_ImageFormat_JPEG
#define _omip_FeedbackImage_ImageFormat_ARRAYSIZE ((omip_FeedbackImage_ImageFormat)(omip_FeedbackImage_ImageFormat_JPEG+1))

#define _omip_DeviceCapabilityResponse_PortDescription_PortType_MIN omip_DeviceCapabilityResponse_PortDescription_PortType_DIGITAL_INPUT
#define _omip_DeviceCapabilityResponse_PortDescription_PortType_MAX omip_DeviceCapabilityResponse_PortDescription_PortType_LED_OUTPUT
#define _omip_DeviceCapabilityResponse_PortDescription_PortType_ARRAYSIZE ((omip_DeviceCapabilityResponse_PortDescription_PortType)(omip_DeviceCapabilityResponse_PortDescription_PortType_LED_OUTPUT+1))





#define omip_FeedbackImage_format_ENUMTYPE omip_FeedbackImage_ImageFormat





#define omip_DeviceCapabilityResponse_PortDescription_type_ENUMTYPE omip_DeviceCapabilityResponse_PortDescription_PortType


/* Initializer values for message structs */
#define omip_WrapperMessage_init_default         {0, {omip_InputDigital_init_default}}
#define omip_InputDigital_init_default           {0, 0, 0}
#define omip_InputAnalog_init_default            {0, 0, 0}
#define omip_InputEncoder_init_default           {0, 0, 0}
#define omip_FeedbackImage_init_default          {0, 0, _omip_FeedbackImage_ImageFormat_MIN, 0, 0, {0, {0}}, 0}
#define omip_FeedbackLed_init_default            {0, 0, 0}
#define omip_SystemConfig_init_default           {0}
#define omip_DeviceCapabilityRequest_init_default {0}
#define omip_DeviceCapabilityResponse_init_default {0, {{NULL}, NULL}}
#define omip_DeviceCapabilityResponse_PortDescription_init_default {_omip_DeviceCapabilityResponse_PortDescription_PortType_MIN, 0}
#define omip_WrapperMessage_init_zero            {0, {omip_InputDigital_init_zero}}
#define omip_InputDigital_init_zero              {0, 0, 0}
#define omip_InputAnalog_init_zero               {0, 0, 0}
#define omip_InputEncoder_init_zero              {0, 0, 0}
#define omip_FeedbackImage_init_zero             {0, 0, _omip_FeedbackImage_ImageFormat_MIN, 0, 0, {0, {0}}, 0}
#define omip_FeedbackLed_init_zero               {0, 0, 0}
#define omip_SystemConfig_init_zero              {0}
#define omip_DeviceCapabilityRequest_init_zero   {0}
#define omip_DeviceCapabilityResponse_init_zero  {0, {{NULL}, NULL}}
#define omip_DeviceCapabilityResponse_PortDescription_init_zero {_omip_DeviceCapabilityResponse_PortDescription_PortType_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define omip_InputDigital_device_id_tag          1
#define omip_InputDigital_port_id_tag            2
#define omip_InputDigital_state_tag              3
#define omip_InputAnalog_device_id_tag           1
#define omip_InputAnalog_port_id_tag             2
#define omip_InputAnalog_value_tag               3
#define omip_InputEncoder_device_id_tag          1
#define omip_InputEncoder_port_id_tag            2
#define omip_InputEncoder_steps_tag              3
#define omip_FeedbackImage_device_id_tag         1
#define omip_FeedbackImage_screen_id_tag         2
#define omip_FeedbackImage_format_tag            3
#define omip_FeedbackImage_total_size_tag        4
#define omip_FeedbackImage_chunk_offset_tag      5
#define omip_FeedbackImage_chunk_data_tag        6
#define omip_FeedbackImage_is_last_chunk_tag     7
#define omip_FeedbackLed_device_id_tag           1
#define omip_FeedbackLed_led_id_tag              2
#define omip_FeedbackLed_color_rgb_tag           3
#define omip_DeviceCapabilityResponse_device_id_tag 1
#define omip_DeviceCapabilityResponse_ports_tag  2
#define omip_WrapperMessage_input_digital_tag    1
#define omip_WrapperMessage_input_analog_tag     2
#define omip_WrapperMessage_input_encoder_tag    3
#define omip_WrapperMessage_feedback_image_tag   4
#define omip_WrapperMessage_feedback_led_tag     5
#define omip_WrapperMessage_system_config_tag    6
#define omip_WrapperMessage_capability_request_tag 7
#define omip_WrapperMessage_capability_response_tag 8
#define omip_DeviceCapabilityResponse_PortDescription_type_tag 1
#define omip_DeviceCapabilityResponse_PortDescription_port_id_tag 2

/* Struct field encoding specification for nanopb */
#define omip_WrapperMessage_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,input_digital,message_type.input_digital),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,input_analog,message_type.input_analog),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,input_encoder,message_type.input_encoder),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,feedback_image,message_type.feedback_image),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,feedback_led,message_type.feedback_led),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,system_config,message_type.system_config),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,capability_request,message_type.capability_request),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message_type,capability_response,message_type.capability_response),   8)
#define omip_WrapperMessage_CALLBACK NULL
#define omip_WrapperMessage_DEFAULT NULL
#define omip_WrapperMessage_message_type_input_digital_MSGTYPE omip_InputDigital
#define omip_WrapperMessage_message_type_input_analog_MSGTYPE omip_InputAnalog
#define omip_WrapperMessage_message_type_input_encoder_MSGTYPE omip_InputEncoder
#define omip_WrapperMessage_message_type_feedback_image_MSGTYPE omip_FeedbackImage
#define omip_WrapperMessage_message_type_feedback_led_MSGTYPE omip_FeedbackLed
#define omip_WrapperMessage_message_type_system_config_MSGTYPE omip_SystemConfig
#define omip_WrapperMessage_message_type_capability_request_MSGTYPE omip_DeviceCapabilityRequest
#define omip_WrapperMessage_message_type_capability_response_MSGTYPE omip_DeviceCapabilityResponse

#define omip_InputDigital_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   port_id,           2) \
X(a, STATIC,   SINGULAR, BOOL,     state,             3)
#define omip_InputDigital_CALLBACK NULL
#define omip_InputDigital_DEFAULT NULL

#define omip_InputAnalog_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   port_id,           2) \
X(a, STATIC,   SINGULAR, FLOAT,    value,             3)
#define omip_InputAnalog_CALLBACK NULL
#define omip_InputAnalog_DEFAULT NULL

#define omip_InputEncoder_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   port_id,           2) \
X(a, STATIC,   SINGULAR, SINT32,   steps,             3)
#define omip_InputEncoder_CALLBACK NULL
#define omip_InputEncoder_DEFAULT NULL

#define omip_FeedbackImage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   screen_id,         2) \
X(a, STATIC,   SINGULAR, UENUM,    format,            3) \
X(a, STATIC,   SINGULAR, UINT32,   total_size,        4) \
X(a, STATIC,   SINGULAR, UINT32,   chunk_offset,      5) \
X(a, STATIC,   SINGULAR, BYTES,    chunk_data,        6) \
X(a, STATIC,   SINGULAR, BOOL,     is_last_chunk,     7)
#define omip_FeedbackImage_CALLBACK NULL
#define omip_FeedbackImage_DEFAULT NULL

#define omip_FeedbackLed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   led_id,            2) \
X(a, STATIC,   SINGULAR, UINT32,   color_rgb,         3)
#define omip_FeedbackLed_CALLBACK NULL
#define omip_FeedbackLed_DEFAULT NULL

#define omip_SystemConfig_FIELDLIST(X, a) \

#define omip_SystemConfig_CALLBACK NULL
#define omip_SystemConfig_DEFAULT NULL

#define omip_DeviceCapabilityRequest_FIELDLIST(X, a) \

#define omip_DeviceCapabilityRequest_CALLBACK NULL
#define omip_DeviceCapabilityRequest_DEFAULT NULL

#define omip_DeviceCapabilityResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  ports,             2)
#define omip_DeviceCapabilityResponse_CALLBACK pb_default_field_callback
#define omip_DeviceCapabilityResponse_DEFAULT NULL
#define omip_DeviceCapabilityResponse_ports_MSGTYPE omip_DeviceCapabilityResponse_PortDescription

#define omip_DeviceCapabilityResponse_PortDescription_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, UINT32,   port_id,           2)
#define omip_DeviceCapabilityResponse_PortDescription_CALLBACK NULL
#define omip_DeviceCapabilityResponse_PortDescription_DEFAULT NULL

extern const pb_msgdesc_t omip_WrapperMessage_msg;
extern const pb_msgdesc_t omip_InputDigital_msg;
extern const pb_msgdesc_t omip_InputAnalog_msg;
extern const pb_msgdesc_t omip_InputEncoder_msg;
extern const pb_msgdesc_t omip_FeedbackImage_msg;
extern const pb_msgdesc_t omip_FeedbackLed_msg;
extern const pb_msgdesc_t omip_SystemConfig_msg;
extern const pb_msgdesc_t omip_DeviceCapabilityRequest_msg;
extern const pb_msgdesc_t omip_DeviceCapabilityResponse_msg;
extern const pb_msgdesc_t omip_DeviceCapabilityResponse_PortDescription_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define omip_WrapperMessage_fields &omip_WrapperMessage_msg
#define omip_InputDigital_fields &omip_InputDigital_msg
#define omip_InputAnalog_fields &omip_InputAnalog_msg
#define omip_InputEncoder_fields &omip_InputEncoder_msg
#define omip_FeedbackImage_fields &omip_FeedbackImage_msg
#define omip_FeedbackLed_fields &omip_FeedbackLed_msg
#define omip_SystemConfig_fields &omip_SystemConfig_msg
#define omip_DeviceCapabilityRequest_fields &omip_DeviceCapabilityRequest_msg
#define omip_DeviceCapabilityResponse_fields &omip_DeviceCapabilityResponse_msg
#define omip_DeviceCapabilityResponse_PortDescription_fields &omip_DeviceCapabilityResponse_PortDescription_msg

/* Maximum encoded size of messages (where known) */
/* omip_WrapperMessage_size depends on runtime parameters */
/* omip_DeviceCapabilityResponse_size depends on runtime parameters */
#define OMIP_PROTO_OMIP_PB_H_MAX_SIZE            omip_FeedbackImage_size
#define omip_DeviceCapabilityRequest_size        0
#define omip_DeviceCapabilityResponse_PortDescription_size 8
#define omip_FeedbackImage_size                  231
#define omip_FeedbackLed_size                    18
#define omip_InputAnalog_size                    17
#define omip_InputDigital_size                   14
#define omip_InputEncoder_size                   18
#define omip_SystemConfig_size                   0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
